#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>

typedef int BYTE;

using namespace std;

const int Nb=4, Nk=4;
int Nr=10;
vector <int> Rcon;
//Nb is the no. of columns in the state
//Nk is the number of 32-bit words in the key, can be 4, 6, or 8

BYTE s[256] = 
{
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};//s-box

BYTE inv_s[256] = 
{
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};//inverse s-box

int RotWord(int num){//left rotate the word by one byte
	int mask=0xFF<<24;
	int temp=num&mask;
	temp=temp>>24;
	num=(num<<8)|temp;
	return num;
}

BYTE lookup(BYTE num){//looks up in the S-box
	BYTE mask=0xFF;
	BYTE temp=num&mask;
	BYTE row, col;
	col=temp&0xF;
	row=(temp>>4)&0xF;
	temp=s[16*row+col];
	return temp;
}

BYTE inv_lookup(BYTE num){
	BYTE mask=0xFF;
	BYTE temp=num&mask;
	BYTE row, col;
	col=temp&0xF;
	row=(temp>>4)&0xF;
	temp=inv_s[16*row+col];
	return temp;
}

int SubWord(int num){//substitution using s-box
	int num1=0;
	for(int i=0;i<4;++i){
		BYTE temp=lookup(num);
		num1=num1|(temp<<(8*i));
		num=num>>8;
	}
	return num1;
}

int gmul(int a, int b) {//GF(2^8) Finite field multiplication
        int p = 0;
        int counter;
        int carry;
        for (counter = 0; counter < 8; counter++) {
                if (b & 1) 
                        p ^= a;
                carry = a & 0x80;  /* detect if x^8 term is about to be generated */
                a <<= 1;
                if (carry) 
                        a ^= 0x001B; /* replace x^8 with x^4 + x^3 + x + 1 */
                b >>= 1;
        }
        p=p&0xff;
        return p;
}


void keyExpansion(int key[], int w[]){//expands the key to generate round keys
	int temp, i;
	for(i=0;i<Nk;++i){
		w[i]=key[i];
	}

	i=Nk;

	while(i<(Nb*(Nr+1))) {
		temp=w[i-1];
		if(i%Nk==0)
			temp=SubWord(RotWord(temp)) ^ Rcon[i/Nk];
		else if (Nk>6 && i % Nk ==4)
			temp=SubWord(temp);
		w[i]=w[i-Nk] ^ temp;
		i=i+1;
	}
}


int calcNr(int nk){//calculate the value of no. of rounds depending upon the size of key
	int nr;
	if(nk==4)
		nr=10;
	else if(nk==6)
		nr=12;
	else if(nk==8)
		nr=14;
	return nr;
}

void evalRoundConst(){//calculates the round constants
	Rcon.resize(Nr+1, 0);
	Rcon[1]=0x01;
	for(int i=1;i<=Nr;++i){
		Rcon[i]=gmul(2, Rcon[i-1]);
	}
	for(int i=1;i<=Nr; ++i){
		Rcon[i]<<=24;
	}
}

void SubBytes(int st[][Nb]){//substitution using s-box
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			st[i][j]=lookup(st[i][j]);
		}
	}
}

void InvSubBytes(int st[][Nb]){//substitution using s-box
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			st[i][j]=inv_lookup(st[i][j]);
		}
	}
}

void rotateLeft(int a[], int d){
	reverse(a, a+d);
	reverse(a+d, a+Nb);
	reverse(a, a+Nb);
}

void ShiftRows(int st[][Nb]){
	for(int i=1;i<4;++i){
		rotateLeft(st[i], i);
	}
	/*for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			printf("%d ", st[i][j]);
		}
		printf("\n");
	}*/
}

void InvShiftRows(int st[][Nb]){
	for(int i=1;i<4;++i){
		rotateLeft(st[i], Nb-i);
	}
}

void MixColumns(int st[][Nb]){
	int mat[][Nb]={{0x02, 0x03, 0x01, 0x01},
				   {0x01, 0x02, 0x03, 0x01},
				   {0x01, 0x01, 0x02, 0x03},
				   {0x03, 0x01, 0x01, 0x02}};
	int mult[4][Nb];
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
				mult[i][j]=0;
			for(int k=0;k<Nb;++k){
				mult[i][j]^=gmul(mat[i][k], st[k][j]);
			}
		}
	}
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			st[i][j]=mult[i][j];
			//printf("%x ", st[i][j]);
		}
		//printf("\n");
	}
}

void InvMixColumns(int st[][Nb]){
	int mat[][Nb]={{0x0e, 0x0b, 0x0d, 0x09},
				   {0x09, 0x0e, 0x0b, 0x0d},
				   {0x0d, 0x09, 0x0e, 0x0b},
				   {0x0b, 0x0d, 0x09, 0x0e}};
	int mult[4][Nb];
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
				mult[i][j]=0;
			for(int k=0;k<Nb;++k){
				mult[i][j]^=gmul(mat[i][k], st[k][j]);
			}
		}
	}
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			st[i][j]=mult[i][j];
			//printf("%x ", st[i][j]);
		}
		//printf("\n");
	}
}

void AddRoundKey(int st[][Nb], int w[], int round){
	round--;
	for(int i=0;i<Nb;++i){
		int temp=w[round+i];
		for(int j=0;j<4;++j){
			int mask=0xff;
			st[i][j]^=(temp&mask);
			temp=temp>>8;
		}
	}
}

void cipher(BYTE ip[], BYTE op[], int w[]){
	//printf("The input matrix is:\n");
	BYTE state[Nk][Nb];
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			state[i][j]=ip[i+Nk*j];
			//printf("%x ", state[i][j]);
		}
		//printf("\n");
	}
	AddRoundKey(state, w, 0);
	for (int round=1; round<=Nr-1;++round){
			SubBytes(state);
			ShiftRows(state);
			MixColumns(state);
			AddRoundKey(state, w, round);
	}

	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, w, Nr);

	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			op[i+Nk*j]=state[i][j];
		}
	}

}

void InvCipher(BYTE ip[], BYTE op[], int w[]){
	BYTE state[4][Nb];
	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			state[i][j]=ip[i+Nk*j];
			//printf("%x ", state[i][j]);
		}
		//printf("\n");
	}

	AddRoundKey(state, w, Nr);

	for (int round=Nr-1;round>=1;--round){
		InvShiftRows(state);
		InvSubBytes(state);
		AddRoundKey(state, w, round);
		InvMixColumns(state);
	}

	InvShiftRows(state);
	InvSubBytes(state);
	AddRoundKey(state, w, 0);

	for(int i=0;i<4;++i){
		for(int j=0;j<Nb;++j){
			op[i+Nk*j]=state[i][j];
		}
	}
}

int main(){
	//int st[4][4]={{0x87, 0x0, 0x0, 0x0},{0x6E, 0x0, 0x0, 0x0},{0x46, 0x0, 0x0, 0x0},{0xA6, 0x0, 0x0, 0x0}};
	//MixColumns(st);
	Nr=calcNr(Nk);
	
	evalRoundConst();

	int key[Nk];
	printf("Enter 128-bit key as four space separated 32-bit words in hex:\n");
	for(int i=0;i<Nk;++i){
		scanf("%x", &key[i]);
	}
	int w[Nb*(Nr+1)];
	keyExpansion(key, w);
	printf("The expanded key for each round:\n");
	for(int i=0;i<Nb*(Nr+1);++i)
		printf("Round-%d: %x\n", i/4, w[i]);
	printf("\n");

	/*BYTE ip[16], op[16], ip1[16];
	printf("Enter the input (space separated 16-bytes) in hex:\n");
	for(int i=0;i<16;++i){
		scanf("%x", &ip[i]);
	}
	
	cipher(ip, op, w);

	printf("AES encoded cipher text:\n");
	for(int i=0;i<16;++i){
		printf("%x ", (char)op[i]);
	}
	printf("\n");

	InvCipher(op, ip1, w);

	printf("AES decoded cipher text:\n");
	for(int i=0;i<16;++i){
		printf("%x ", (char)ip1[i]);
	}
	printf("\n");*/

	char message[1000], ciphertext[1000], decodedmsg[1000];
	getchar();
	printf("Enter the message to be encoded: ");
	cin.getline(message, 1000);
	for(int i=0;i<strlen(message);i+=16){
		BYTE ip[16], op[16], ip1[16];
		for(int j=0;j<16;++j){
			ip[j]=(BYTE)message[i+j];
		}
		cipher(ip, op, w);
		for(int j=0;j<16;++j){
			ciphertext[i+j]=(char)op[j];
		}
		InvCipher(op, ip1, w);
		for(int j=0;j<16;++j){
			decodedmsg[j+i]=(char)ip1[j];
		}
	}
	printf("MESSAGE: %s\n", message);
	printf("AES Encoded Cipher Text:");
	for(int i=0;i<strlen(message);++i){
		printf("%x", ciphertext[i]);
	}
	printf("\n");
	printf("DECODED MESSAGE: %s\n", decodedmsg);
	return 0;
}
